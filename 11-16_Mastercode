// SPDX-License-Identifier: MIT
pragma solidity ^0.8.9;

contract Payroll {
    address public company;
    address payable public taxInstitution;
    address payable public socialInstitution;
    
    constructor(address _company, address payable _taxInstitution, address payable _socialInstitution) {
        company = _company;
        taxInstitution = _taxInstitution;
        socialInstitution = _socialInstitution;
    }

    modifier onlyCompany() {
        require(
            msg.sender == company,
            "Only the company can call this function"
        );
        _;
    }

    function setCompanyAddress(address _company) external onlyCompany {
        company = _company;
    }

    function setTaxInstitutionAddress(
        address payable _taxInstitution
    ) external onlyCompany {
        taxInstitution = _taxInstitution;
    }
    
      function setsocialInstitutionAddress(
        address payable _socialInstitution
    ) external onlyCompany {
        socialInstitution = _socialInstitution;
    }

    struct Employee {
        uint256 salary;
        uint256 netSalary;
        uint256 taxRate; // Percentage based tax rate
        bool isMarried;
        uint256 partnerSalary;
        uint256 socialContributions;
        uint256 tax;
    }

    mapping(address => Employee) public employees;

    function addEmployee(
        address employeeAddress,
        uint256 salary,
        uint256 partnerSalary,
        bool isMarried
    ) external onlyCompany {
        require(
            employees[employeeAddress].salary == 0,
            "Employee already exists"
        );

        uint256 taxRate;
        uint256 tax;
        uint256 netSalary;
        uint256 socialContributions;
        uint256 baseSalary;

        if (isMarried) {
            uint256 familySalary = salary + partnerSalary;
            if (familySalary <= 28800) {
                taxRate = 0;
            } else if (familySalary <= 51800) {
                taxRate = 1;
            } else if (familySalary <= 105400) {
                taxRate = 5;
            } else if (familySalary <= 912600) {
                taxRate = 13;
            } else {
                taxRate = 12;
            }

            socialContributions = (familySalary * 5275) / 100000; //social error
            baseSalary = familySalary -socialContributions;
            tax = (baseSalary * taxRate) / 100;
            netSalary=familySalary-socialContributions-tax;

        } else {
            if (salary <= 28800) {
                taxRate = 0;
            } else if (salary <= 32200) {
                taxRate = 1;
            } else if (salary <= 42200) {
                taxRate = 2;
            } else if (salary <= 56200) {
                taxRate = 3;
            } else if (salary <= 73900) {
                taxRate = 4;
            } else if (salary <= 79600) {
                taxRate = 6;
            } else if (salary <= 105500) {
                taxRate = 7;
            } else if (salary <= 137200) {
                taxRate = 9;
            } else if (salary <= 179400) {
                taxRate = 11;
            } else if (salary <= 769600) {
                taxRate = 13;
            } else {
                taxRate = 15;
            }
            
            socialContributions = (salary * 5275) / 100000;
            baseSalary = salary -socialContributions;
            tax = (baseSalary * taxRate) / 100;
            netSalary=salary-socialContributions-tax;
             
        }

        employees[employeeAddress] = Employee(
            salary,
            netSalary,
            taxRate, 
            isMarried,
            partnerSalary,
            socialContributions,
            tax
        );
    }

    function removeEmployee(address employeeAddress) external onlyCompany {
        require(employees[employeeAddress].salary > 0, "Employee does not exist");
        delete employees[employeeAddress]; // Removing the employee
    }

    function sendViaTransfer(
        address payable _employeeAddress, 
        address payable _taxInstitution, 
        address payable _SocInstitution
        ) external payable onlyCompany{ 
            _employeeAddress.transfer(employees[_employeeAddress].netSalary); 
            _taxInstitution.transfer(employees[_employeeAddress].tax);
            _SocInstitution.transfer(employees[_employeeAddress].socialContributions);
    }
} 
